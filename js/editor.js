class PixelArtEditor {
    constructor(gridSize = 16) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        this.gridSize = gridSize === 32 ? 16 : gridSize;
        this.currentColor = '#ff0000';
        this.currentTool = 'brush';
        this.isDrawing = false;
        this.canvas = [];
        this.init();
    }
    
    init() {
        this.createGrid();
        this.setupEventListeners();
    }
    
    createGrid() {
        const container = document.getElementById('canvas');
        if (!container) {
            console.error('Canvas container not found');
            return;
        }
        
        const pixelSize = this.calculatePixelSize();
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';
        container.style.gridTemplateColumns = `repeat(${this.gridSize}, 1fr)`;
        
        this.canvas = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø–∏–∫—Å–µ–ª–∏
        for (let i = 0; i < this.gridSize * this.gridSize; i++) {
            const pixel = document.createElement('div');
            pixel.className = 'pixel';
            pixel.dataset.index = i;
            
            container.appendChild(pixel);
            this.canvas.push({ element: pixel, color: null });
        }
        
        console.log(`Created ${this.gridSize}x${this.gridSize} grid`);
    }
    
    calculatePixelSize() {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏–∫—Å–µ–ª—è
        const baseSize = window.innerWidth <= 480 ? 15 : 20;
        return Math.max(8, Math.min(30, Math.floor(baseSize * 16 / this.gridSize)));
    }
    
    setupEventListeners() {
        const container = document.getElementById('canvas');
        if (!container) return;
        
        container.addEventListener('mousedown', (e) => this.startDrawing(e));
        container.addEventListener('mousemove', (e) => this.draw(e));
        container.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.startDrawing(e);
        });
        container.addEventListener('touchmove', (e) => {
            e.preventDefault();
            this.draw(e);
        });
        
        document.addEventListener('mouseup', () => this.stopDrawing());
        document.addEventListener('touchend', () => this.stopDrawing());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('tool')) {
                document.querySelectorAll('.tool').forEach(t => t.classList.remove('active'));
                e.target.classList.add('active');
                this.currentTool = e.target.dataset.tool;
            }
            
            if (e.target.classList.contains('color')) {
                document.querySelectorAll('.color').forEach(c => c.classList.remove('active'));
                e.target.classList.add('active');
                this.currentColor = e.target.dataset.color;
            }
        });
    }
    
    startDrawing(e) {
        this.isDrawing = true;
        this.draw(e);
    }
    
    draw(e) {
        if (!this.isDrawing) return;
        
        let pixel;
        if (e.type.includes('touch')) {
            const touch = e.touches[0];
            const element = document.elementFromPoint(touch.clientX, touch.clientY);
            if (element && element.classList.contains('pixel')) {
                pixel = element;
            }
        } else {
            pixel = e.target;
        }
        
        if (pixel && pixel.classList.contains('pixel')) {
            this.applyTool(pixel);
        }
    }
    
    applyTool(pixel) {
        const index = parseInt(pixel.dataset.index);
        
        switch (this.currentTool) {
            case 'brush':
                pixel.style.backgroundColor = this.currentColor;
                this.canvas[index].color = this.currentColor;
                break;
                
            case 'eraser':
                pixel.style.backgroundColor = '';
                this.canvas[index].color = null;
                break;
                
            case 'fill':
                this.floodFill(index);
                break;
        }
    }
    
    floodFill(startIndex) {
        const targetColor = this.canvas[startIndex].color;
        if (targetColor === this.currentColor) return;
        
        const queue = [startIndex];
        const visited = new Set();
        
        while (queue.length > 0) {
            const index = queue.shift();
            if (visited.has(index)) continue;
            
            visited.add(index);
            
            if (this.canvas[index].color === targetColor) {
                this.canvas[index].color = this.currentColor;
                this.canvas[index].element.style.backgroundColor = this.currentColor;
                
                const x = index % this.gridSize;
                const y = Math.floor(index / this.gridSize);
                
                if (x > 0) queue.push(index - 1);
                if (x < this.gridSize - 1) queue.push(index + 1);
                if (y > 0) queue.push(index - this.gridSize);
                if (y < this.gridSize - 1) queue.push(index + this.gridSize);
            }
        }
    }
    
    stopDrawing() {
        this.isDrawing = false;
    }
    
    changeGridSize(newSize) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const allowedSizes = [8, 16];
        const finalSize = allowedSizes.includes(parseInt(newSize)) ? parseInt(newSize) : 16;
        
        this.gridSize = finalSize;
        this.createGrid();
        this.setupEventListeners();
    }
    
    exportAsPNG() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const scale = Math.max(2, Math.floor(512 / this.gridSize));
        
        canvas.width = this.gridSize * scale;
        canvas.height = this.gridSize * scale;
        
        this.canvas.forEach((pixelData, index) => {
            const x = (index % this.gridSize) * scale;
            const y = Math.floor(index / this.gridSize) * scale;
            
            if (pixelData.color) {
                ctx.fillStyle = pixelData.color;
            } else {
                ctx.fillStyle = '#2d2d2d';
            }
            
            ctx.fillRect(x, y, scale, scale);
        });
        
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è Telegram
        if (window.telegramApp && window.telegramApp.isInTelegram) {
            this.downloadInTelegram(canvas);
        } else {
            this.downloadInBrowser(canvas);
        }
    }
    
    downloadInBrowser(canvas) {
        const link = document.createElement('a');
        link.download = `pixel-art-${this.gridSize}x${this.gridSize}-${Date.now()}.png`;
        link.href = canvas.toDataURL();
        link.click();
        
        if (window.telegramApp) {
            window.telegramApp.showAlert(`–†–∏—Å—É–Ω–æ–∫ ${this.gridSize}x${this.gridSize} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ PNG! üéâ`);
        } else {
            alert(`–†–∏—Å—É–Ω–æ–∫ ${this.gridSize}x${this.gridSize} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ PNG! üéâ`);
        }
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è Telegram
    downloadInTelegram(canvas) {
        const imageDataUrl = canvas.toDataURL('image/png');
        const filename = `pixel-art-${this.gridSize}x${this.gridSize}-${Date.now()}.png`;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const downloadLink = document.createElement('a');
        downloadLink.href = imageDataUrl;
        downloadLink.download = filename;
        downloadLink.style.display = 'none';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM
        document.body.appendChild(downloadLink);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        if (window.telegramApp) {
            window.telegramApp.showAlert(
                `üì∏ –í–∞—à —Ä–∏—Å—É–Ω–æ–∫ ${this.gridSize}x${this.gridSize} –≥–æ—Ç–æ–≤!\n\n` +
                '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é:\n\n' +
                '1. –ù–∞–∂–º–∏—Ç–µ –û–ö –≤ —ç—Ç–æ–º –æ–∫–Ω–µ\n' +
                '2. –ü–æ—è–≤–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n' +
                '3. –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É\n' +
                '4. –í—ã–±–µ—Ä–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å" –∏–ª–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"\n\n' +
                '–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ –≤–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–µ! üì±'
            );
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è alert
            setTimeout(() => {
                downloadLink.click();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                setTimeout(() => {
                    window.telegramApp.showAlert(
                        '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å:\n\n' +
                        '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n' +
                        '‚Ä¢ –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑\n' +
                        '‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≥–∞–ª–µ—Ä–µ—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                    );
                    
                    // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    setTimeout(() => {
                        if (document.body.contains(downloadLink)) {
                            document.body.removeChild(downloadLink);
                        }
                    }, 10000);
                }, 1000);
            }, 1500);
        }
    }
    
    getProjectData() {
        return {
            pixels: this.canvas.map(pixel => pixel.color),
            gridSize: this.gridSize
        };
    }
    
    loadProject(data) {
        if (data && data.pixels) {
            if (data.gridSize && data.gridSize !== this.gridSize) {
                this.changeGridSize(data.gridSize);
            }
            
            setTimeout(() => {
                data.pixels.forEach((color, index) => {
                    if (index < this.canvas.length && this.canvas[index]) {
                        this.canvas[index].color = color;
                        if (this.canvas[index].element) {
                            this.canvas[index].element.style.backgroundColor = color;
                        }
                    }
                });
            }, 100);
        }
    }
    
    getUsedColors() {
        const colors = new Set();
        this.canvas.forEach(pixel => {
            if (pixel.color) {
                colors.add(pixel.color);
            }
        });
        return Array.from(colors).slice(0, 2);
    }
    
    generateThumbnail() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const scale = 2;
        
        canvas.width = this.gridSize * scale;
        canvas.height = this.gridSize * scale;
        
        this.canvas.forEach((pixelData, index) => {
            const x = (index % this.gridSize) * scale;
            const y = Math.floor(index / this.gridSize) * scale;
            
            if (pixelData.color) {
                ctx.fillStyle = pixelData.color;
            } else {
                ctx.fillStyle = '#2d2d2d';
            }
            
            ctx.fillRect(x, y, scale, scale);
        });
        
        return canvas.toDataURL();
    }
}
